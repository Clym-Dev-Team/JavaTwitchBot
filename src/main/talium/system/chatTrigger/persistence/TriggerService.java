package talium.system.chatTrigger.persistence;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import talium.system.chatTrigger.triggerEngine.RuntimeTrigger;
import talium.inputs.Twitch4J.ChatMessage;
import talium.system.stringTemplates.TemplateService;

import java.util.HashMap;
import java.util.List;
import java.util.Optional;

import static talium.system.chatTrigger.triggerEngine.TriggerProvider.transformTrigger;

@Service
public class TriggerService {
    private final TriggerRepo repo;
    private final TemplateService templateService;

    @Autowired
    public TriggerService(TriggerRepo triggerRepo, TemplateService templateService) {
        this.repo = triggerRepo;
        this.templateService = templateService;
    }

    public HashMap<String, TriggerEntity> getCodeTriggers() {
        HashMap<String, TriggerEntity> map = new HashMap<>();
        var list = repo.getAllByisAutoGenerated(false);
        for (var item : list) {
            map.put(item.id, item);
        }
        return map;
    }

    public HashMap<String, RuntimeTrigger> getUserTriggers() {
        HashMap<String, RuntimeTrigger> map = new HashMap<>();
        var list = repo.getAllByisAutoGenerated(true);
        for (var item : list) {
            map.put(item.id, transformTrigger(item, TriggerService::TESINGCALLBACK));
        }
        return map;
    }

    public void removeTrigger(String id) {
        repo.deleteById(id);
    }

    public void save(TriggerEntity entity) {
        for (MessagePattern pattern : entity.patterns) {
            pattern.parentTrigger = entity;
        }
        templateService.save(entity.template);
        repo.save(entity);
    }

    public List<TriggerEntity> getAllTriggers() {
        return repo.findAll();
    }

    public Optional<TriggerEntity> getTriggersId(String id) {
        return repo.findById(id);
    }

    public static void TESINGCALLBACK(String triggerId, ChatMessage message) {
        System.out.println("CALLBACK " + triggerId + ": " + message);

    }
}
